#! /bin/bash

CALLDIR="$(dirname "$(readlink -f "$0")")"
cd "${CALLDIR}" || { echo "Could not cd to the script directory?!?" ; exit 1 ; }

REPOBASE="git@github.com:OpenParliamentTV/"
REPOS="OpenParliamentTV-Tools OpenParliamentTV-Data-DE"
PARLIAMENT="DE"
PERIOD=20
LANGUAGE=deu
NEL_DATA_DIR="${CALLDIR}/OpenParliamentTV-Data-DE/metadata"
# Specify NER API endpoint if needed
NER_API_ENDPOINT=""
# Make sure LOGFILE is an absolute path, since we may cd to some other
# directories during the execution
LOGFILE=${CALLDIR}/optv-update.log

CONFIG_FILE="${CALLDIR}/optv.config"
[ -f "${CONFIG_FILE}" ] && . "${CONFIG_FILE}"

log () {
   echo "$*"
   echo "$(date -Is) $*" >> "$LOGFILE"
}

basic_check () {
    # Basic check for repository directories
    retcode=0
    for d in $REPOS
    do
        if [ ! -d "$d" ]
        then
            echo "Missing repository $d - run $0 init"
            retcode=1
        fi
    done
    return $retcode
}

datadir () {
    echo "${CALLDIR}/OpenParliamentTV-Data-$1"
}
codedir () {
    echo "${CALLDIR}/OpenParliamentTV-Tools/optv/parliaments/$1"
}

execute_command () {
    command=$1

    # Used for download/update/fullupdate/align...
    workflow_command="./workflow.py --lang=$LANGUAGE --period=$PERIOD --retry-count=20"

    if [ "$command" = "init" ]
    # Repository structure initialization
    then
        for d in $REPOS
        do
            if [ ! -d "$d" ]
            then
                git clone "${REPOBASE}${d}.git"
            fi
        done
    elif [ "$command" = "pull" ]
    # Repository code/data update
    then
        cd "${CALLDIR}" || { echo "Could not cd to the script directory?!?" ; exit 1 ; }
        # Update main repository
        echo "Updating main"
        git pull
        retcode=$?

        # Update all git repositories
        for d in $REPOS
        do
            echo "Updating $d"
            ( cd "$d" && git pull )
            if [ ! $? ]
            then
                retcode=1
            fi
        done
        # Update NEL entities
        mkdir -p "${NEL_DATA_DIR}" && curl --fail --output "${NEL_DATA_DIR}/entities.json" "https://de.openparliament.tv/data/entity-dump/?type=all&wiki=true&exclude_document=true"
        return $retcode
    elif [ "$command" = "status" ]
    # Repository status
    then
        git status
        for d in $REPOS
        do
            if [ -d "$d" ]
            then
                ( cd "$d" && git status )
            else
                echo "$d is not present - you should run init"
            fi
        done
        # docker-compose ps
    elif [ "$command" = "check" ]
    # Checks
    then
        # Check repositories/dependencies/etc
        basic_check
        retcode=$?
        # Check that PARLIAMENT defined code/data is here
        for d in "$(datadir $PARLIAMENT)" "$(codedir $PARLIAMENT)"
        do
            if [ ! -d "$d" ]
            then
                echo "Parliament ${PARLIAMENT} - missing ${d}"
                retcode=1
            fi
        done
        # Check python modules
        for module in aeneas yaml feedparser lxml spacy
        do
            python3 -c "import ${module}" > /dev/null 2>&1
            if [ ! $? ]
            then
                retcode=1
                echo "The python module ${module} is not present. Run 'python3 -m pip install -r OpenParliamentTV-Tools/requirements.txt' to install it."
                if [ "${module}" = "aeneas" ]
                then
                    echo "Note that it depends on python3-dev and espeak-dev (on Debian, you can install them with `sudo apt install python3-dev espeak-dev`)"
                fi
            fi
        done
        if [ $retcode ]
        then
            echo "All checks OK"
        fi
        return $retcode
    elif [ "$command" = "download" ]
    # Download + link
    then
        cd "$(codedir $PARLIAMENT)" || { echo "Could not cd to the $(codedir $PARLIAMENT) directory?!?" ; exit 1 ; }
        data="$(datadir $PARLIAMENT)"
        log "Updating data for $PARLIAMENT into $data"
        ${workflow_command} --download-original --merge-speeches --link-entities "$data" >> "${LOGFILE}" 2>&1
        return $?
    elif [ "$command" = "update" ]
    # Download + nel + time-align
    then
        cd "$(codedir $PARLIAMENT)" || { echo "Could not cd to the $(codedir $PARLIAMENT) directory?!?" ; exit 1 ; }
        data="$(datadir $PARLIAMENT)"
        log "Updating data for $PARLIAMENT into $data"
        ${workflow_command} --download-original --merge-speeches --link-entities --align-sentences "$data" >> "${LOGFILE}" 2>&1
        return $?
    elif [ "$command" = "align" ]
    # Time align only without downloading first
    then
        cd "$(codedir $PARLIAMENT)" || { echo "Could not cd to the $(codedir $PARLIAMENT) directory?!?" ; exit 1 ; }
        data="$(datadir $PARLIAMENT)"
        log "Aligning data for $PARLIAMENT into $data"
        ${workflow_command} --link-entities --align-sentences "$data" >> "${LOGFILE}" 2>&1
        return $?
    elif [ "$command" = "ner" ]
    # NER only without any other action (downloading, time-align, entity linking)
    then
        cd "$(codedir $PARLIAMENT)" || { echo "Could not cd to the $(codedir $PARLIAMENT) directory?!?" ; exit 1 ; }
        data="$(datadir $PARLIAMENT)"
        log "Aligning data for $PARLIAMENT into $data"
        ${workflow_command} --ner-api-endpoint="$NER_API_ENDPOINT" --extract-entities "$data" >> "${LOGFILE}" 2>&1
        return $?
    elif [ "$command" = "fullupdate" ]
    # Do full update + time align + NER
    then
        cd "$(codedir $PARLIAMENT)" || { echo "Could not cd to the $(codedir $PARLIAMENT) directory?!?" ; exit 1 ; }
        data="$(datadir $PARLIAMENT)"
        log "Updating+aligning+NER data for $PARLIAMENT into $data"
        ${workflow_command} --download-original --merge-speeches --link-entities --align-sentences --ner-api-endpoint="$NER_API_ENDPOINT" --extract-entities "$data" >> "${LOGFILE}" 2>&1
        return $?
    elif [ "$command" = "publish" ]
    then
        cd "$(datadir $PARLIAMENT)" || { echo "Could not cd to the $(datadir $PARLIAMENT) directory?!?" ; exit 1 ; }
        # We can simply add media and proceedings directory since
        # the converted files are specified in .gitignore
        git add original/media original/proceedings processed metadata
        git commit -m "optv publication on $(date -Iseconds)"
        git push
    elif [ "$command" = "debug" ]
    then
        log "Debugging info - exiting"
        return 1
    else
        cat <<EOF
$0 - handle OpenParliamentTV services

Syntax: optv command [...command]
with command being

check - check necessary dependencies/dir layout
init - initialize repositories
pull - update all git repositories
status - status of docker containers and git repositories
update - update parliament data (download + time-align)
download - download parliament data (download media+proceedings)
align - time-align files that need it (no download)
fullupdate - do a full update+align+NER
publish - publish new files to git server
EOF
        exit 1
    fi
}


if [ -z "$*" ]
then
    # This will exit
    execute_command help
fi

for command in "$@"
do
    execute_command "$command" || {
        log "Command $command failed - stopping pipeline execution"
        exit 1
    }
done
