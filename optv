#! /bin/bash

CALLDIR="$(dirname "$(readlink -f "$0")")"
cd "${CALLDIR}" || { echo "Could not cd to the script directory?!?" ; exit 1 ; }

REPOBASE="https://github.com/OpenParliamentTV/"
REPOS="OpenParliamentTV-Tools OpenParliamentTV-Data-DE"
PARLIAMENTS="DE"
PERIOD=20
# Make sure LOGFILE is an absolute path, since we may cd to some other
# directories during the execution
LOGFILE=${CALLDIR}/optv-update.log

log () {
   echo "$*"
   echo "$(date -Is) $*" >> "$LOGFILE"
}

basic_check () {
    # Basic check for repository directories
    retcode=0
    for d in $REPOS
    do
        if [ ! -d "$d" ]
        then
            echo "Missing repository $d - run $0 init"
            retcode=1
        fi
    done
    return $retcode
}

datadir () {
    echo "${CALLDIR}/OpenParliamentTV-Data-$1"
}
codedir () {
    echo "${CALLDIR}/OpenParliamentTV-Tools/optv/parliaments/$1"
}

command="$1"

if [ "$command" = "init" ]
# Repository structure initialization
then
    for d in $REPOS
    do
        if [ ! -d "$d" ]
        then
            git clone "${REPOBASE}${d}.git"
        fi
    done
elif [ "$command" = "pull" ]
# Repository code/data update
then
    # Update main repository
    echo "Updating main"
    git pull

    # Update all git repositories
    for d in $REPOS
    do
        echo "Updating $d"
        ( cd "$d" && git pull )
    done
elif [ "$command" = "status" ]
# Repository status
then
    git status
    for d in $REPOS
    do
        if [ -d "$d" ]
        then
            ( cd "$d" && git status )
        else
            echo "$d is not present - you should run init"
        fi
    done
    # docker-compose ps
elif [ "$command" = "check" ]
# Checks
then
    # Check repositories/dependencies/etc
    basic_check
    retcode=$?
    # Check that PARLIAMENTS defined code/data is here
    for p in $PARLIAMENTS
    do
        for d in "$(datadir $p)" "$(codedir $p)"
        do
            if [ ! -d "$d" ]
            then
                echo "Parliament ${p} - missing ${d}"
                retcode=1
            fi
        done
    done
    python3 -c 'import aeneas' > /dev/null 2>&1
    if [ ! $? ]
    then
        retcode=1
        echo "The python module aeneas is not present. Run 'python3 -m pip install OpenParliamentTV-Tools/requirements.txt' to install it."
        echo "Note that it depends on python3-dev and espeak-dev (on Debian)"
        exit $retcode
    fi
elif [ "$command" = "update" ]
# Data update
then
    for p in $PARLIAMENTS
    do
        cd "$(codedir $p)" || { echo "Could not cd to the $(codedir $p) directory?!?" ; exit 1 ; }
        data="$(datadir $p)"
        log "Updating data for $p into $data"
        ./workflow.py --period=$PERIOD --retry-count=20 "$data" >> "${LOGFILE}" 2>&1
    done
elif [ "$command" = "fullupdate" ]
# Do full update + time align + NER
then
    for p in $PARLIAMENTS
    do
        cd "$(codedir $p)" || { echo "Could not cd to the $(codedir $p) directory?!?" ; exit 1 ; }
        data="$(datadir $p)"
        log "Updating+aligning+NER data for $p into $data"
        ./workflow.py --period=$PERIOD --retry-count=20 --align-sentences --extract-entities "$data" >> "${LOGFILE}" 2>&1
    done
else
    cat <<EOF
$0 - handle OpenParliamentTV services

Syntax: optv command
with command being

check - check necessary dependencies/dir layout
init - initialize repositories
pull - update all git repositories
status - status of docker containers and git repositories
update - update parliament data
fullupdate - do a full update+align+NER
EOF
fi
